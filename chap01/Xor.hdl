/*
      Nand(a,b) = -(a.b) = -a + -b
      Not(a) = Nand(a,a) = -a + -a = -a
      And(a,b) = a.b = -(-(a.b)) = Not(Nand(a,b)) = Nand(Nand(a,b), Nand(a,b))
      Or(a,b) = a + b = -(-a) + -(-b) = -(-a . -b) = Nand(-a,-b) = Nand(Nand(a,a), Nand(b,b))

      a.-b = Not(Nand(a,-b)) = Not(Nand(a, Nand(b,b))) 
            =Nand(Nand(a,Nand(b,b)), Nand(a,Nand(b,b)))
      -a.b = Not(Nand(-a,b)) = Not(Nand(Nand(a,a), b))
            =Nand(Nand(Nand(a,a), b),Nand(Nand(a,a), b))
      Xor(a,b) = a.-b + -a.b = Or(a.-b, -a.b)
               = Nand(Nand(a.-b, a.-b), Nand(-a.b, -a.b))
*/

CHIP Xor{
    IN a,b;
    OUT out;
    PARTS:
    // calc a.-b
    Nand(a=b, b=b, out=w1);
    Nand(a=a, b=w1, out=w2);
    Nand(a=w2,b=w2, out=w3);
    // calc -a.b
    Nand(a=a, b=a, out=w4);
    Nand(a=w4,b=b, out=w5);
    Nand(a=w5,b=w5, out=w6);
    // calc xor(a,b)
    Nand(a=w3,b=w3, out=w7);
    Nand(a=w6,b=w6, out=w8);
    Nand(a=w7,b=w8, out=out);
}